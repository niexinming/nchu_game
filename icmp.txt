using System;
using System.CodeDom.Compiler;
using System.Net;
using System.Net.Sockets;
using System.Text;

public class SimplePing
{
    public static void Main()
    {


        byte[] data = new byte[1024];
        int recv;
        Socket host = new Socket(AddressFamily.InterNetwork, SocketType.Raw, ProtocolType.Icmp);
        IPEndPoint iep = new IPEndPoint(IPAddress.Parse("10.13.1.126"), 0);
        EndPoint ep = (EndPoint)iep;
        for (ushort i = 0; i < 65536; i++)
        {
            ICMP packet = new ICMP();

            packet.Type = 0x00;
            packet.Code = 0x00;
            packet.Checksum = 0;
            packet.identifierbe = i;

            packet.sequence_numberbe = 0x0001;

            Buffer.BlockCopy(BitConverter.GetBytes((short)1), 0, packet.Message, 0, 2);
            Buffer.BlockCopy(BitConverter.GetBytes((short)1), 0, packet.Message, 2, 2);



            data = Encoding.ASCII.GetBytes("hello");


            Buffer.BlockCopy(data, 0, packet.Message, 0, data.Length);
            packet.MessageSize = data.Length;
            int packetsize = packet.MessageSize + 8;

            UInt16 chcksum = packet.getChecksum();
            packet.Checksum = chcksum;

           // host.SetSocketOption(SocketOptionLevel.Socket, SocketOptionName.ReceiveTimeout, 3000);
            Console.WriteLine(i);
            host.SendTo(packet.getBytes(), packet.getBytes().Length, SocketFlags.None, iep);
        }
        /*    try
       {
          data = new byte[1024];
          recv = host.ReceiveFrom(data, ref ep);
       } catch (SocketException)
       {
          Console.WriteLine("No response from remote host");
          return;
       }
       ICMP response = new ICMP(data, recv);
       Console.WriteLine("response from: {0}", ep.ToString());
       Console.WriteLine("  Type {0}", response.Type);
       Console.WriteLine("  Code: {0}", response.Code);
       int Identifier = BitConverter.ToInt16(response.Message, 0);
       int Sequence = BitConverter.ToInt16(response.Message, 2);
       Console.WriteLine("  Identifier: {0}", Identifier);
       Console.WriteLine("  Sequence: {0}", Sequence);
       string stringData = Encoding.ASCII.GetString(response.Message, 4, response.MessageSize - 4);
       Console.WriteLine("  data: {0}", stringData);
       */
        host.Close();
    }
}

class ICMP
{
    public byte Type;
    public byte Code;
    public UInt16 Checksum;
    public UInt16 identifierbe;

    public UInt16 sequence_numberbe;

    public int MessageSize;
    public byte[] Message = new byte[1024];

    public ICMP()
    {
    }

    public ICMP(byte[] data, int size)
    {
        Type = data[20];
        Code = data[21];
        Checksum = BitConverter.ToUInt16(data, 22);
        MessageSize = size - 24;
        Buffer.BlockCopy(data, 24, Message, 0, MessageSize);
    }

    public byte[] getBytes()
    {
        byte[] data = new byte[MessageSize + 8];
        Buffer.BlockCopy(BitConverter.GetBytes(Type), 0, data, 0, 1);
        Buffer.BlockCopy(BitConverter.GetBytes(Code), 0, data, 1, 1);
        Buffer.BlockCopy(BitConverter.GetBytes(Checksum), 0, data, 2, 2);
        Buffer.BlockCopy(BitConverter.GetBytes(identifierbe), 0, data, 4, 2);

        Buffer.BlockCopy(BitConverter.GetBytes(sequence_numberbe), 0, data, 6, 2);

        Buffer.BlockCopy(Message, 0, data, 8, MessageSize);
        return data;
    }

    public UInt16 getChecksum()
    {
        UInt32 chcksm = 0;

        byte[] data = new byte[getBytes().Length + 2];
        getBytes().CopyTo(data, 0);

        int packetsize = data.Length - 1;
        int index = 0;

        while (index < packetsize)
        {
            chcksm += Convert.ToUInt32(BitConverter.ToUInt16(data, index));
          //  Console.WriteLine(index);
            index += 2;
        }
        chcksm = (chcksm >> 16) + (chcksm & 0xffff);
        chcksm += (chcksm >> 16);
        return (UInt16)(~chcksm);
    }
}
